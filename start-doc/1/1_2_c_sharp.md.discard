# C#
C# (C sharp) 是一门高级计算机语言，就像上一节说的，我将项目比作一本书，而 C# 就是写这本书的语言，因为我们最终写的书是要装订完交给计算机去看的，所以需要用计算机能够读懂的语言去写，这样它才能按照我们说的步骤来进行工作。（其实这里简化了一下，我们所用的高级计算机语言计算机并不能直接理解，只是对于人类来说是一门可读性更高的计算机语言，写完之后还需要通过特殊的编译器编译之后计算机才能够识别。）

这里只做简单的说明，会介绍模组开发中会用的比较多的点，也不会做详细的描述。如果有基础或者是其他语言的基础，请按照自己的经验来，可以跳过这一节。

## 变量
我们在进行运算的时候，会有很多数字什么的，变量就是这些数字的别称，只不过这个别称被规定了类型并且这个别称下的数字可以修改。（数字只是一个类型，C# 中还有许多其他的类型）以下是 C# 中的常见的类型：
| 类型       | 描述                                                      |
| ----------- | --------------------------------------------------------- |
| bool          | 表示布尔值，可以是 true 或 false                           |
| byte           | 表示 8 位无符号整数，范围为 0 到 255                     |
| sbyte         | 表示 8 位有符号整数，范围为 -128 到 127                    |
| short         | 表示 16 位有符号整数，范围为 -32768 到 32767               |
| ushort       | 表示 16 位无符号整数，范围为 0 到 65535                   |
| int             | 表示 32 位有符号整数，范围为 -2147483648 到 2147483647    |
| uint           | 表示 32 位无符号整数，范围为 0 到 4294967295              |
| long           | 表示 64 位有符号整数，范围为 -9223372036854775808 到 9223372036854775807 |
| ulong         | 表示 64 位无符号整数，范围为 0 到 18446744073709551615    |
| float           | 表示单精度浮点数，范围为 -3.402823e38 到 3.402823e38，可用于存储较小的小数   |
| double        | 表示双精度浮点数，范围为 -1.79769313486232e308 到 1.79769313486232e308，可用于存储较大或较小的小数 |
| decimal       | 表示高精度小数，适用于金融和货币计算                        |
| char           | 表示单个 Unicode 字符                                    |
| string         | 表示字符串                                                |
| object        | 表示任意类型的基类                                       |
| DateTime   | 表示日期和时间                                           |
| TimeSpan    | 表示时间间隔                                             |
| enum            | 表示一组具名的整数常量                                   |
| struct          | 表示一个值类型                                           |
| class            | 表示一个引用类型                                         |
| interface      | 表示一组相关方法和属性的契约                             |

不用记住，用的时候查一下就行。以下的内容都是这样，有个大概印象就行，达到用的时候能想到相关内容，然后再去查一下详细内容就行。

### 常量

### 静态变量

## 基本操作
注意，行末尾的分号代表一个语句，我们可以不在分号后换行，但是每个语句结束都要加上分号，类似我们写一句话要加上句号一样。

`//` 表示这一行是注释，编译器不会对注释进行任何操作，但是在代码内加上注释有利于之后我们在继续修改项目的时候更容易理解我们所写的代码。或者是别人更容易理解我们所写的代码。（加注释是个很好的习惯，可是我没有。）

### 赋值
C# 里面使用 `=` 就可以对变量进行赋值：
```cs
// <类型> <变量名> = <对应类型的值>
int a = 1;
// 赋值之后我们后面就要用 a 这个字母表示整数 1 了。
Console.WriteLine(a);
```
将这个代码块的内容复制到我们上一节创建的项目中的 `Program.cs` 内，点击运行就可以看到弹出的窗口输出了 1，也可以将 1 改为任意数字看看输出是否有变化。

上面代码块是声明变量之后直接赋值，我们也可以声明多个变量之后在后面进行赋值：
```cs
int x, y, z;
x = 1;
y = 2;
z = 3;
Console.WriteLine(x+y-z); // 0
```

### 运算
#### 数学运算
我们在数学中用的加减乘除在 C# 中都有对应的运算 `+`、`-`、`*`、`/`，但是如果你用整型也就是 `int` 类型的运算来存储 除法运算结果，会直接忽略小数位，需要用浮点类型也就是 `double` 或者 `float` double 占用的空间会比 float 大，但是精度更高；除此之外，还有模运算也就是取余，用 `%`。

#### 逻辑运算
以下是 C# 中常用的逻辑运算符及其说明：

| 运算符 | 描述                     | 示例                 |
| ------ | ------------------------ | -------------------- |
| &&     | 逻辑与（and）两边都真才是真| `a && b`             |
| \|\|   | 逻辑或（or）两边有一个真就是真| `a \|\| b`          |
| !      | 逻辑非（not）直接取反，真为假 假为真| `!a`           |
| ^      | 异或（xor）              | `a ^ b`              |
| ==     | 相等比较                 | `a == b`             |
| !=     | 不等比较                 | `a != b`             |
| >      | 大于比较                 | `a > b`              |
| <      | 小于比较                 | `a < b`              |
| >=     | 大于等于比较             | `a >= b`             |
| <=     | 小于等于比较             | `a <= b`             |

缺氧的自动化模块也有相似的逻辑。

我们通过以上介绍的逻辑运算符可以写出来逻辑表达式（可理解为自动化模块），逻辑表达式最后的结果是布尔类型（bool）的值，这种类型的值只有两种 `true` 或 `false`（即真或假）以下是列举的一些逻辑表达式：
```cs
int a, b;
a = 1;
b = 2;
a == b; // false
a != b; // true
a < b; // true
a > b; // false
!(a > b); // true
(a < b || a > b); // true
(a == b || a > b); // false
(a < b && a == b); // true
(a < b && a > b); // false

```
下面循环与分支中的 `循环条件`、`条件` 都是逻辑表达式
### 循环
循环就是满足一定的条件反复执行某几个语句，几个语句在循环内就组成了循环体。

在 C# 中，常用的循环语句有以下三种：

1. `for` 循环：
```cs
for (初始化表达式; 循环条件; 循环迭代)
{
    // 循环体代码
}
```

2. `while` 循环：
```cs
while (循环条件)
{
    // 循环体代码
}
```

3. `do-while` 循环：
```cs
do
{
    // 循环体代码
} while (循环条件);
```

此外，C# 还提供了一种特殊的循环语句 `foreach` 用于遍历集合或数组中的元素：
```cs
foreach (元素类型 变量名 in 集合或数组)
{
    // 循环体代码
}
```

这些循环语句都可以根据需要进行嵌套使用，以实现复杂的循环逻辑。需要根据具体需求选择合适的循环语句。

举个例子，我们有要执行 10 次某个循环体的话，可以这样来实现：
```cs
// i++ 是自增操作，操作之后 i 会加一
for (int i = 0; i < 10; i++)
{
  Console.WriteLine(i);
}
// 或者
int i = 0;
while ( i != 9)
{
  Console.WriteLine(i);
  i++;
}
```

### 分支
在 C# 中，常用的分支语句有以下三种：

1. `if` 语句：
```cs
if (条件)
{
    // 满足条件时执行的代码
}
else if (其他条件)
{
    // 满足其他条件时执行的代码（可选）
}
else
{
    // 所有条件都不满足时执行的代码（可选）
}
```

2. `switch` 语句：
```cs
// 表达式可以是数字(int)或者字符(char)
switch (表达式)
{
    case 值1:
        // 当表达式等于值1时执行的代码
        break;
    case 值2:
        // 当表达式等于值2时执行的代码
        break;
    default:
        // 所有条件都不满足时执行的代码（可选）
        break;
}
```

3. `三元运算符` 语句：
```cs
结果类型 结果 = 条件 ? 成立时的值 : 不成立时的值;
```
### 例子 1 
```cs
// 计算 z = 2x + y/2
// 判断输入不同的 x 和 y，z 的值是否相同
int x, y, z1, z2;
x = 1 ; y = 2;
z1 = x * 2 + y / 2; // z1 = 3
x = 2; y = 6;
z2 = x * 2 + y / 2; // z2 = 7
Console.WriteLine(z1 == z2); // false
```

### 函数
函数很类似在

在上一个例子中可以看到，其实我们对 z 赋值的运算都一样，而我们每次赋值的时候都要复制一下运算，简单的同类运算还好，复杂的运算很可能在某次复制中出错，这个时候就需要用函数来将这些语句组合起来，C# 中的函数需要这样来声明：
```cs
类型 函数名(输入1, 输入2)
{
  函数体（语句的集合）
  输出
}
// 代码化
int function(x, y)
{
    return 2 * x + y / 2;
}
```
一般我们将输入成为形式参数，输出成为函数返回。函数返回值的类型一定要和声明函数的类型相同，不然会被报错，就像气体运输管道不能接收液体输出口的输出一样。这样一来，我们例子 1 中的代码可以写为以下形式：
```cs

int countZ(x, y)
{
    return 2 * x + y / 2;
}
// 计算 z = 2x + y/2
// 判断输入不同的 x 和 y，z 的值是否相同
int x, y, z1, z2;
x = 1 ; y = 2;
z1 = countZ(x, y); // z1 = 3
x = 2; y = 6;
z2 = countZ(x, y) // z2 = 7
Console.WriteLine(z1 == z2); // false
```

### 引用
C# 中的引用时通过 `using` 关键字来导入的，我们一般引用别人的库都是为了使用它的方法。引用就类似我们想要做一个大的裂解模块，我看到 UP1 的大模块中有一小部分我可以用，拿来用，看到 UP2 的大模块中有一小部分我能用，拿过来，最后组成我们自己的模块。

比如我需要一个取绝对值的方法，但不想自己写，那么就可以用 `System.Math` 库，这个库不需要我们声明 `using` 就能使用：

```cs
// using XXX
int X = -1;
Console.WriteLine(Math.Abs(X)); // 1
```

### 命名空间
C# 中，命名空间使用 `namesapce` 关键词来定义。在一个项目里面可以拥有多个命名空间，但大多数情况下，一个以项目名称为名称的命名空间就够了。当你在 B 项目里面想要调用 A 项目的代码，只需要引入 A 项目，输入`using 命名空间名称`就行了。
```cs
namesapce A
{
    // fun
    // vars
    // class
}
```

## 类
在面向对象编程语言中，比较重要的概念就是类了。所谓万物皆对象，类是对对象的抽象，对象是特殊的类。比如小说是一个类，那么具体的小说就是对象了。

在 C# 中，类用 `class` 关键字定义。

```cs
class ClassName
{
    // vars
    // funs
}
```
### 公有与私有的概念
在类里面，我们声明变量，声明函数，（以下统一叫做 “成员”）有些函数和变量我们并不像暴露在外，只能在实现类的对象内部使用，因为这些数据敏感，一旦在外部修改这个数据，就有可能导致我们整个程序垮掉。我们希望能够在类外部访问的成员使用 `public` 关键字来声明，而希望只在内部使用的成员就用 `private` 关键字声明。下面，以 “猫” 这个类作为例子来理解这个概念。

在 `Program.cs` 文件中，输入以下代码：
```cs
using Animals;



Cat cat = new("cat1");
cat.AddAge();
cat.ShowInfo();



namespace Animals {
    public class Cat {
        public string name;
        private int age;
        private int id;

        public Cat(string name) {
            age = 0;
            GenerateId();
            this.name = name;
        }

        public void AddAge() {
            this.age++;
        }

        private void GenerateId() { 
            Random rnd = new();
            this.id = rnd.Next();
        }

        public void ShowInfo() {
            Console.WriteLine("name: "+this.name+"\nage: "+ this.age.ToString() + "\nid: " + this.id.ToString());
        }
    }    
}

```
